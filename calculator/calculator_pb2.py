# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: calculator.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10\x63\x61lculator.proto\x12\ncalculator\"/\n\x0b\x43\x61lcRequest\x12\x0f\n\x07numberA\x18\x01 \x01(\x05\x12\x0f\n\x07numberB\x18\x02 \x01(\x05\"\x1c\n\rNumericResult\x12\x0b\n\x03sum\x18\x01 \x01(\x05\x32\x95\x01\n\nCalculator\x12@\n\nSumNumbers\x12\x17.calculator.CalcRequest\x1a\x19.calculator.NumericResult\x12\x45\n\x0fSubtractNumbers\x12\x17.calculator.CalcRequest\x1a\x19.calculator.NumericResultb\x06proto3')



_CALCREQUEST = DESCRIPTOR.message_types_by_name['CalcRequest']
_NUMERICRESULT = DESCRIPTOR.message_types_by_name['NumericResult']
CalcRequest = _reflection.GeneratedProtocolMessageType('CalcRequest', (_message.Message,), {
  'DESCRIPTOR' : _CALCREQUEST,
  '__module__' : 'calculator_pb2'
  # @@protoc_insertion_point(class_scope:calculator.CalcRequest)
  })
_sym_db.RegisterMessage(CalcRequest)

NumericResult = _reflection.GeneratedProtocolMessageType('NumericResult', (_message.Message,), {
  'DESCRIPTOR' : _NUMERICRESULT,
  '__module__' : 'calculator_pb2'
  # @@protoc_insertion_point(class_scope:calculator.NumericResult)
  })
_sym_db.RegisterMessage(NumericResult)

_CALCULATOR = DESCRIPTOR.services_by_name['Calculator']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CALCREQUEST._serialized_start=32
  _CALCREQUEST._serialized_end=79
  _NUMERICRESULT._serialized_start=81
  _NUMERICRESULT._serialized_end=109
  _CALCULATOR._serialized_start=112
  _CALCULATOR._serialized_end=261
# @@protoc_insertion_point(module_scope)
